{"version":3,"sources":["history.js","view/Board/MainBoard.js","redux-saga/board/boardActions.js","redux-saga/board/boardActionsTypes.js","routes/index.js","App.js","serviceWorker.js","redux-saga/board/boardReducer.js","redux-saga/rootReducer.js","constants/apiConstant.js","utils/customFetch.js","api/board.js","redux-saga/board/boardSaga.js","redux-saga/rootSaga.js","configureStore.js","index.js"],"names":["createBrowserHistory","connect","state","boardItems","dispatch","fetchWeather","payload","type","data","item","usePosition","latitude","longitude","searchQuery","useMemo","useEffect","colorForTemp","main","temp","className","name","style","color","MainRouter","Fragment","path","component","Board","App","history","Component","Boolean","window","location","hostname","match","initialState","undefined","action","response","rootReducer","combineReducers","API_URL","client","axios","create","baseURL","headers","request","options","then","catch","error","Promise","reject","boardApi","getWeather","fetch","url","method","detail","Error","getAllItems","call","put","all","takeLatest","rootSaga","boardSaga","sagaMiddleware","createSagaMiddleware","store","preloadedState","middlewares","enhancers","applyMiddleware","composedEnhancers","compose","createStore","run","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c997fb75.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React,  { useEffect, useMemo } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { usePosition } from 'use-position';\r\nimport { fetchWeatherRequest } from \"../../redux-saga/board/boardActions\";\r\n\r\n\r\n\r\nconst MainBoard = ({ fetchWeather, item }) => {\r\n\r\n  const { latitude, longitude } = usePosition();\r\n\r\n  const searchQuery = useMemo(\r\n    () => ({\r\n        latitude,\r\n        longitude\r\n    }), [latitude, longitude]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if(latitude && longitude) {\r\n      fetchWeather(searchQuery)\r\n    }\r\n  }, [fetchWeather, latitude, longitude, searchQuery]);\r\n\r\n  const colorForTemp = useMemo(\r\n    () => {\r\n      if ( item && item.main.temp > -10 && item.main.temp < 30) {\r\n        return \"#fff700\"\r\n      } else if (item && item.main.temp > 30) {\r\n        return \"#ff8c00\"\r\n      } else {\r\n        return \"#00ffff\"\r\n      }\r\n    }, [item]\r\n  )\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col-12 d-flex justify-content-center title\"><h1>Current Weather</h1></div>\r\n      <div className=\"col-12 weather-holder\">\r\n          {\r\n            item &&\r\n            <div className=\"weather-holder__widget\">\r\n              <p className=\"weather-holder__widget--tittle\">{item.name}</p>\r\n              <p className=\"weather-holder__widget--temp\"\r\n                 style={{ color: colorForTemp}}>\r\n                {item.main.temp}\r\n                <span>&#8451;</span>\r\n              </p>\r\n            </div>\r\n          }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(\r\n  state => state.boardItems,\r\n  dispatch => ({\r\n    fetchWeather: payload => dispatch(fetchWeatherRequest(payload)),\r\n  })\r\n)(MainBoard);\r\n","import * as types from \"./boardActionsTypes\";\r\n\r\nexport const fetchWeatherRequest = data => {\r\n  return { type: types.GET_ALL_ITEMS, data };\r\n};\r\n","export const GET_ALL_ITEMS = \"GET_ALL_ITEMS\";\r\nexport const GET_ALL_ITEMS_SUCCESS = \"GET_ALL_ITEMS_SUCCESS\";\r\nexport const GET_ALL_ITEMS_ERROR = \"GET_ALL_ITEMS_ERROR\";\r\n\r\n","import React from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Board from \"../view/Board/MainBoard\"\r\n\r\nconst MainRouter = () =>  {\r\n\r\n    return(\r\n        <React.Fragment>\r\n          <Switch>\r\n            <Route path=\"/\" component={Board}/>\r\n          </Switch>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\n\r\nexport default MainRouter;\r\n","import React, { Component } from \"react\";\r\nimport history from './history';\r\nimport { Router, Route } from \"react-router-dom\";\r\n\r\nimport MainRouter from \"./routes/index\"\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Router history={history}>\r\n          <main className=\"container\">\r\n            <Route component={MainRouter} />\r\n          </main>\r\n        </Router>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as types from \"./boardActionsTypes\";\r\n\r\nexport const initialState = {\r\n  item: undefined,\r\n};\r\n\r\nconst boardItems = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GET_ALL_ITEMS_SUCCESS: {\r\n      return {\r\n        item: {...action.response}\r\n      }\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default boardItems;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport boardItems from \"./board/boardReducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n  boardItems\r\n});\r\n\r\nexport default rootReducer;\r\n","const HOST = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nexport const API_URL = `${HOST}`;\r\n","import axios from \"axios\";\r\nimport { API_URL } from \"../constants/apiConstant\";\r\n\r\nconst client = axios.create({\r\n  baseURL: API_URL,\r\n  headers: { \"Content-Type\": \"application/json\" }\r\n});\r\n\r\nconst request = function(options) {\r\n\r\n  const onSuccess = function(response) {\r\n\r\n    return response.data;\r\n  };\r\n  const onError = function(error) {\r\n\r\n    if (error && error.response && error.response.data) return Promise.reject(error.response.data);\r\n    return Promise.reject(error.response.data);\r\n  };\r\n\r\n  return client(options)\r\n    .then(onSuccess)\r\n    .catch(onError);\r\n};\r\n\r\nexport default request;\r\n","import fetch from \"../utils/customFetch\";\r\n\r\nconst boardApi = {\r\n  async getWeather(data) {\r\n    try {\r\n      return await fetch({\r\n        url: `weather?&units=metric&lat=${data.latitude}&lon=${data.longitude}&appid=8b1cb9daef8e2166d79cbe69546160f4`,\r\n        method: \"GET\",\r\n      });\r\n    } catch (err) {\r\n      if (err && err.response && err.response.data && err.response.data.detail) {\r\n        throw Error(err.response.data.detail);\r\n      }\r\n      throw Error(\"Oops, something is wrong\");\r\n    }\r\n  },\r\n};\r\n\r\nexport default boardApi;\r\n","import { all, put, call, takeLatest } from \"redux-saga/effects\";\r\nimport boardApi from \"../../api/board\";\r\nimport * as types from \"./boardActionsTypes\";\r\n\r\nfunction *getAllItems({data}) {\r\n  try {\r\n    const response = yield call(boardApi.getWeather, data);\r\n\r\n    yield put({type: types.GET_ALL_ITEMS_SUCCESS, response})\r\n  }\r\n  catch(error) {\r\n    yield put({type: types.GET_ALL_ITEMS_ERROR, error})\r\n  }\r\n}\r\n\r\nexport default function *() {\r\n  yield all([\r\n    yield takeLatest(types.GET_ALL_ITEMS, getAllItems),\r\n  ])\r\n}\r\n","import { all } from \"redux-saga/effects\";\r\n\r\nimport boardSaga from \"./board/boardSaga\"\r\n\r\nexport default function *rootSaga() {\r\n  yield all([\r\n    boardSaga()\r\n  ]);\r\n}\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootReducer from \"./redux-saga/rootReducer\";\r\nimport rootSaga from \"./redux-saga/rootSaga\"\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n\r\nexport default function configureStore(preloadedState) {\r\n\r\n  // Combine all middlewares into single enhancer\r\n  const middlewares = [sagaMiddleware];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  // Compose all enhancer into single function\r\n  const enhancers = [middlewareEnhancer];\r\n  const composeFunction = process.env.NODE_ENV !== \"production\" ? composeWithDevTools : compose;\r\n  const composedEnhancers = composeFunction(...enhancers);\r\n\r\n  // Create store with preloaded state and enhancers\r\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\r\n\r\n  // Run all sagas\r\n  sagaMiddleware.run(rootSaga);\r\n\r\n  return store;\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport configureStore from \"./configureStore\";\r\n\r\nimport \"./assets/styles/index.scss\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst store = configureStore();\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}